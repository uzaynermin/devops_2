pipeline {
    agent any
    environment {
        SNYK_TOKEN = credentials('snyk-token')
        DOCKER_IMAGE_NAME = "devops-image"
        DOCKER_USERNAME = "osmanmurat"
        DOCKER_TOKEN = credentials('docker-token')
        KUBERNET_CLUSTER_NAME="deneme4"
	    GIT_REPO = "https://github.com/osmanmurat/DevOpsAPI.git"
	    GKE_LOGIN = "gcloud container clusters get-credentials devops8 --region europe-west1 --project devops7-412510"
    }
    stages {
        stage('Repoyu Al') {
            steps {
                git branch: 'master', url: "${GIT_REPO}"
            }
        }
        stage('Snyk Kod Testi') {
            steps {
                script {
                    try {
                        sh "snyk auth $SNYK_TOKEN"
                        sh 'snyk code test'
                    } catch (Exception e) {
                        echo "Snyk Kod Testi başarısız oldu, ancak yapıya devam ediliyor."
                    }
                }
            }
        }
        stage('Docker İmajını Oluştur') {
            when {
                expression {
                    // Snyk Kod Testi başarılı olduysa devam et
                    return currentBuild.resultIsBetterOrEqualTo("SUCCESS")
                }
            }
            steps {
                script {
                    // Dockerfile'ı kullanarak Docker imajını oluştur
                    sh "ls"
                    sh "docker build -t ${DOCKER_IMAGE_NAME} -f DevOpsAPI/Dockerfile ."

                }
            }
        }
        stage('Docker İmajını Yayınla') {
            steps {
                script {
                    sh "docker login -u ${DOCKER_USERNAME} -p ${DOCKER_TOKEN}"
                    sh "docker tag ${DOCKER_IMAGE_NAME} ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest"
                    sh "docker push ${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest"
                }
            }
        }
        stage('Snyk İmaj Taraması') {
            steps {
                script {
                    try {
                        // Docker imajını Snyk'a gönder
                        sh "snyk container test ${DOCKER_IMAGE_NAME}:latest"
            
                        // Snyk tarafından gerçekleştirilen tarama sonuçlarını görüntüle
                        sh "snyk container monitor ${DOCKER_IMAGE_NAME}:latest"
                        
                    } catch (Exception e) {
                        echo "Snyk image taramasında açık bulundu, ancak yapıya devam ediliyor."
                    }
                }
            }
        }
        stage('Kubernetes Cluster ile Projeyi Yayınla') {
            when {
                expression {
                    // Snyk İmaj Taraması başarılı olduysa devam et
                    return currentBuild.resultIsBetterOrEqualTo("SUCCESS")
                }
            }
            steps {
                script {
                    withCredentials([file(credentialsId: 'google-key-file', variable: 'MY_KUBECONFIG_FILE')]) {
                        
                        // Now you can use the copied file, for example with gcloud
                        sh "gcloud auth activate-service-account --key-file=${MY_KUBECONFIG_FILE}"
                    }
                    
                    sh "${GKE_LOGIN}"
                    // Kubernetes deployment oluştur
                    sh "kubectl create deployment ${KUBERNET_CLUSTER_NAME} --image=${DOCKER_USERNAME}/${DOCKER_IMAGE_NAME}:latest"
            
                    // Oluşturulan deployment'i bir LoadBalancer hizmetiyle yayınla
                    sh "kubectl expose deployment ${KUBERNET_CLUSTER_NAME} --type=LoadBalancer --name=${KUBERNET_CLUSTER_NAME} --port=80 --target-port=80"
                }
            }
        }
    }
}

